<?xml version="1.0" encoding="ISO-8859-1"?>

<project
    xmlns:j="jelly:core"
    xmlns:jelxml="jelly:xml"
    xmlns:jelant="jelly:ant"
    xmlns:maven="jelly:maven"
    xmlns:m="maven">

    <goal
        description="jmxdoclet"
        name="xdoclet:jmxdoclet">

        <taskdef name="jmxdoclet" classname="xdoclet.modules.jmx.JMXDocletTask">
            <classpath>

	        <path refid="maven.dependency.classpath"/>

                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xjavadoc')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet-xdoclet-module')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-collections:commons-collections')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-logging:commons-logging')}"/>
                <pathelement path="${plugin.getDependencyPath('log4j:log4j')}"/>

            </classpath>
        </taskdef>

        <jmxdoclet>
		<!--
            destDir="${maven.xdoclet.jmxdoclet.destDir}"
            mergeDir="${maven.xdoclet.jmxdoclet.mergeDir}"
            encoding="${maven.xdoclet.jmxdoclet.encoding}"
            docencoding="${maven.xdoclet.jmxdoclet.docencoding}"
		   -->
            <jelant:setProperty name="excludedTags" value="${maven.xdoclet.jmxdoclet.excludedTags}"/>
            <jelant:setProperty name="destDir" value="${maven.xdoclet.jmxdoclet.destDir}"/>
            <jelant:setProperty name="mergeDir" value="${maven.xdoclet.jmxdoclet.mergeDir}"/>
            <jelant:setProperty name="force" value="${maven.xdoclet.jmxdoclet.force}"/>
            <jelant:setProperty name="verbose" value="${maven.xdoclet.jmxdoclet.verbose}"/>
            <jelant:setProperty name="addedTags" value="${maven.xdoclet.jmxdoclet.addedTags}"/>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.configParam.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <configParam>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.configParam.${subelement_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.configParam.${subelement_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(subelement_index_var_name)}"/>
                </configParam>
              </j:if>
            </j:forEach>

            <j:set var="fileset_index" value="0"/>
            <j:forEach begin="0" end="10" indexVar="fileset_index">
                <j:set var="fileset_index_var_name" value="maven.xdoclet.jmxdoclet.fileset.${fileset_index}"/>
                <j:if test="${context.getVariable(fileset_index_var_name) != null}">
                    <j:set var="fileset_source_directory_name" value="maven.xdoclet.jmxdoclet.fileset.${fileset_index}.sourcedir"/>
                    <j:if test="${context.getVariable(fileset_source_directory_name) == null}">
                        <j:set var="fileset_source_directory" value="${pom.build.sourceDirectory}"/>
                    </j:if>
                    <j:if test="${context.getVariable(fileset_source_directory_name) != null}">
                        <j:set var="fileset_source_directory" value="${context.getVariable(fileset_source_directory_name)}"/>
                    </j:if>
                    <fileset dir="${fileset_source_directory}">
                        <j:set var="fileset_index_include_var_name" value="maven.xdoclet.jmxdoclet.fileset.${fileset_index}.include"/>
                        <j:set var="fileset_index_exclude_var_name" value="maven.xdoclet.jmxdoclet.fileset.${fileset_index}.exclude"/>
                        <j:if test="${context.getVariable(fileset_index_include_var_name) != null}">
                            <include name="${context.getVariable(fileset_index_include_var_name)}"/>
                        </j:if>
                        <j:if test="${context.getVariable(fileset_index_exclude_var_name) != null}">
                            <exclude name="${context.getVariable(fileset_index_exclude_var_name)}"/>
                        </j:if>
                    </fileset>
                </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jbossxmbean>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmbean.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jbossxmbean>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jbossxmldoc>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmldoc.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jbossxmldoc>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jbossxmlservicetemplate>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.servicefile"/>
                    <jelant:setProperty name="servicefile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.jbossxmlservicetemplate.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jbossxmlservicetemplate>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <mbeaninterface>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mbeaninterface.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </mbeaninterface>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <mlet>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mlet.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </mlet>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <mx4jdescription>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jmxdoclet.mx4jdescription.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </mx4jdescription>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.packageSubstitution.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <packageSubstitution>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.packageSubstitution.${subelement_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.packageSubstitution.${subelement_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.packageSubstitution.${subelement_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(subelement_index_var_name)}"/>
                </packageSubstitution>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <subTask>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.subTask.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </subTask>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <template>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.template.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </template>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <xmlTemplate>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.useIds"/>
                        <jelant:setProperty name="useIds" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.xmlencoding"/>
                        <jelant:setProperty name="xmlencoding" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.schema"/>
                        <jelant:setProperty name="schema" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.validateXML"/>
                        <jelant:setProperty name="validateXML" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jmxdoclet.xmlTemplate.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </xmlTemplate>
              </j:if>
            </j:forEach>

        </jmxdoclet>

        <!--
        In order to make it easier for the user of the XDoclet plugin, we automatically add the
        destination folder to the compile path. This way, people don't have to deal with maven:addPath in their own
        maven.xml scripts. This has been tested with Maven from CVS HEAD on 2002.12.15. (AH)
        -->
        <path id="jmxdoclet.java.compile.src.set" location="${maven.xdoclet.jmxdoclet.destDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="jmxdoclet.java.compile.src.set"/>

    </goal>

    <goal
        description="mockobjectdoclet"
        name="xdoclet:mockobjectdoclet">

        <taskdef name="mockobjectdoclet" classname="xdoclet.modules.mockobjects.MockObjectDocletTask">
            <classpath>

	        <path refid="maven.dependency.classpath"/>

                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xjavadoc')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet-xdoclet-module')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-collections:commons-collections')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-logging:commons-logging')}"/>
                <pathelement path="${plugin.getDependencyPath('log4j:log4j')}"/>

            </classpath>
        </taskdef>

        <mockobjectdoclet>
		<!--
            destDir="${maven.xdoclet.mockobjectdoclet.destDir}"
            mergeDir="${maven.xdoclet.mockobjectdoclet.mergeDir}"
            encoding="${maven.xdoclet.mockobjectdoclet.encoding}"
            docencoding="${maven.xdoclet.mockobjectdoclet.docencoding}"
		   -->
            <jelant:setProperty name="excludedTags" value="${maven.xdoclet.mockobjectdoclet.excludedTags}"/>
            <jelant:setProperty name="destDir" value="${maven.xdoclet.mockobjectdoclet.destDir}"/>
            <jelant:setProperty name="mergeDir" value="${maven.xdoclet.mockobjectdoclet.mergeDir}"/>
            <jelant:setProperty name="force" value="${maven.xdoclet.mockobjectdoclet.force}"/>
            <jelant:setProperty name="verbose" value="${maven.xdoclet.mockobjectdoclet.verbose}"/>
            <jelant:setProperty name="addedTags" value="${maven.xdoclet.mockobjectdoclet.addedTags}"/>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.configParam.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <configParam>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.configParam.${subelement_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.configParam.${subelement_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(subelement_index_var_name)}"/>
                </configParam>
              </j:if>
            </j:forEach>

            <j:set var="fileset_index" value="0"/>
            <j:forEach begin="0" end="10" indexVar="fileset_index">
                <j:set var="fileset_index_var_name" value="maven.xdoclet.mockobjectdoclet.fileset.${fileset_index}"/>
                <j:if test="${context.getVariable(fileset_index_var_name) != null}">
                    <j:set var="fileset_source_directory_name" value="maven.xdoclet.mockobjectdoclet.fileset.${fileset_index}.sourcedir"/>
                    <j:if test="${context.getVariable(fileset_source_directory_name) == null}">
                        <j:set var="fileset_source_directory" value="${pom.build.sourceDirectory}"/>
                    </j:if>
                    <j:if test="${context.getVariable(fileset_source_directory_name) != null}">
                        <j:set var="fileset_source_directory" value="${context.getVariable(fileset_source_directory_name)}"/>
                    </j:if>
                    <fileset dir="${fileset_source_directory}">
                        <j:set var="fileset_index_include_var_name" value="maven.xdoclet.mockobjectdoclet.fileset.${fileset_index}.include"/>
                        <j:set var="fileset_index_exclude_var_name" value="maven.xdoclet.mockobjectdoclet.fileset.${fileset_index}.exclude"/>
                        <j:if test="${context.getVariable(fileset_index_include_var_name) != null}">
                            <include name="${context.getVariable(fileset_index_include_var_name)}"/>
                        </j:if>
                        <j:if test="${context.getVariable(fileset_index_exclude_var_name) != null}">
                            <exclude name="${context.getVariable(fileset_index_exclude_var_name)}"/>
                        </j:if>
                    </fileset>
                </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <mockobjects>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.mockClassPattern"/>
                    <jelant:setProperty name="mockClassPattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.mockobjectdoclet.mockobjects.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </mockobjects>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.packageSubstitution.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <packageSubstitution>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.packageSubstitution.${subelement_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.packageSubstitution.${subelement_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.packageSubstitution.${subelement_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(subelement_index_var_name)}"/>
                </packageSubstitution>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <subTask>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.subTask.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </subTask>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <template>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.template.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </template>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <xmlTemplate>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.useIds"/>
                        <jelant:setProperty name="useIds" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.xmlencoding"/>
                        <jelant:setProperty name="xmlencoding" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.schema"/>
                        <jelant:setProperty name="schema" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.validateXML"/>
                        <jelant:setProperty name="validateXML" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.mockobjectdoclet.xmlTemplate.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </xmlTemplate>
              </j:if>
            </j:forEach>

        </mockobjectdoclet>

        <!--
        In order to make it easier for the user of the XDoclet plugin, we automatically add the
        destination folder to the compile path. This way, people don't have to deal with maven:addPath in their own
        maven.xml scripts. This has been tested with Maven from CVS HEAD on 2002.12.15. (AH)
        -->
        <path id="mockobjectdoclet.java.compile.src.set" location="${maven.xdoclet.mockobjectdoclet.destDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="mockobjectdoclet.java.compile.src.set"/>

    </goal>

    <goal
        description="xdoclet"
        name="xdoclet:xdoclet">

        <taskdef name="xdoclet" classname="xdoclet.DocletTask">
            <classpath>

	        <path refid="maven.dependency.classpath"/>

                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xjavadoc')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet-xdoclet-module')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-collections:commons-collections')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-logging:commons-logging')}"/>
                <pathelement path="${plugin.getDependencyPath('log4j:log4j')}"/>

            </classpath>
        </taskdef>

        <xdoclet>
		<!--
            destDir="${maven.xdoclet.xdoclet.destDir}"
            mergeDir="${maven.xdoclet.xdoclet.mergeDir}"
            encoding="${maven.xdoclet.xdoclet.encoding}"
            docencoding="${maven.xdoclet.xdoclet.docencoding}"
		   -->
            <jelant:setProperty name="excludedTags" value="${maven.xdoclet.xdoclet.excludedTags}"/>
            <jelant:setProperty name="destDir" value="${maven.xdoclet.xdoclet.destDir}"/>
            <jelant:setProperty name="mergeDir" value="${maven.xdoclet.xdoclet.mergeDir}"/>
            <jelant:setProperty name="force" value="${maven.xdoclet.xdoclet.force}"/>
            <jelant:setProperty name="verbose" value="${maven.xdoclet.xdoclet.verbose}"/>
            <jelant:setProperty name="addedTags" value="${maven.xdoclet.xdoclet.addedTags}"/>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <antdocs>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.antdocs.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </antdocs>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <beaninfo>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.i18n"/>
                    <jelant:setProperty name="i18n" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.beaninfo.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </beaninfo>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.configParam.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <configParam>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.configParam.${subelement_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.configParam.${subelement_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(subelement_index_var_name)}"/>
                </configParam>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <externalizer>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.tagName"/>
                    <jelant:setProperty name="tagName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.valueParamName"/>
                    <jelant:setProperty name="valueParamName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.keyParamName"/>
                    <jelant:setProperty name="keyParamName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.externalizer.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </externalizer>
              </j:if>
            </j:forEach>

            <j:set var="fileset_index" value="0"/>
            <j:forEach begin="0" end="10" indexVar="fileset_index">
                <j:set var="fileset_index_var_name" value="maven.xdoclet.xdoclet.fileset.${fileset_index}"/>
                <j:if test="${context.getVariable(fileset_index_var_name) != null}">
                    <j:set var="fileset_source_directory_name" value="maven.xdoclet.xdoclet.fileset.${fileset_index}.sourcedir"/>
                    <j:if test="${context.getVariable(fileset_source_directory_name) == null}">
                        <j:set var="fileset_source_directory" value="${pom.build.sourceDirectory}"/>
                    </j:if>
                    <j:if test="${context.getVariable(fileset_source_directory_name) != null}">
                        <j:set var="fileset_source_directory" value="${context.getVariable(fileset_source_directory_name)}"/>
                    </j:if>
                    <fileset dir="${fileset_source_directory}">
                        <j:set var="fileset_index_include_var_name" value="maven.xdoclet.xdoclet.fileset.${fileset_index}.include"/>
                        <j:set var="fileset_index_exclude_var_name" value="maven.xdoclet.xdoclet.fileset.${fileset_index}.exclude"/>
                        <j:if test="${context.getVariable(fileset_index_include_var_name) != null}">
                            <include name="${context.getVariable(fileset_index_include_var_name)}"/>
                        </j:if>
                        <j:if test="${context.getVariable(fileset_index_exclude_var_name) != null}">
                            <exclude name="${context.getVariable(fileset_index_exclude_var_name)}"/>
                        </j:if>
                    </fileset>
                </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <mavenplugin>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.mavenplugin.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </mavenplugin>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.packageSubstitution.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <packageSubstitution>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.packageSubstitution.${subelement_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.packageSubstitution.${subelement_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.packageSubstitution.${subelement_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(subelement_index_var_name)}"/>
                </packageSubstitution>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <propertiestranslator>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.propertiestranslator.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </propertiestranslator>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <subTask>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.subTask.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </subTask>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.template.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <template>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.template.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </template>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <xml>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.xdoclet.xml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </xml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <xmlTemplate>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.useIds"/>
                        <jelant:setProperty name="useIds" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.xmlencoding"/>
                        <jelant:setProperty name="xmlencoding" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.schema"/>
                        <jelant:setProperty name="schema" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.validateXML"/>
                        <jelant:setProperty name="validateXML" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.xdoclet.xmlTemplate.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </xmlTemplate>
              </j:if>
            </j:forEach>

        </xdoclet>

        <!--
        In order to make it easier for the user of the XDoclet plugin, we automatically add the
        destination folder to the compile path. This way, people don't have to deal with maven:addPath in their own
        maven.xml scripts. This has been tested with Maven from CVS HEAD on 2002.12.15. (AH)
        -->
        <path id="xdoclet.java.compile.src.set" location="${maven.xdoclet.xdoclet.destDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="xdoclet.java.compile.src.set"/>

    </goal>

    <goal
        description="jdodoclet"
        name="xdoclet:jdodoclet">

        <taskdef name="jdodoclet" classname="xdoclet.modules.jdo.JdoDocletTask">
            <classpath>

	        <path refid="maven.dependency.classpath"/>

                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xjavadoc')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet-xdoclet-module')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-collections:commons-collections')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-logging:commons-logging')}"/>
                <pathelement path="${plugin.getDependencyPath('log4j:log4j')}"/>

            </classpath>
        </taskdef>

        <jdodoclet>
		<!--
            destDir="${maven.xdoclet.jdodoclet.destDir}"
            mergeDir="${maven.xdoclet.jdodoclet.mergeDir}"
            encoding="${maven.xdoclet.jdodoclet.encoding}"
            docencoding="${maven.xdoclet.jdodoclet.docencoding}"
		   -->
            <jelant:setProperty name="jdoSpec" value="${maven.xdoclet.jdodoclet.jdoSpec}"/>
            <jelant:setProperty name="excludedTags" value="${maven.xdoclet.jdodoclet.excludedTags}"/>
            <jelant:setProperty name="destDir" value="${maven.xdoclet.jdodoclet.destDir}"/>
            <jelant:setProperty name="mergeDir" value="${maven.xdoclet.jdodoclet.mergeDir}"/>
            <jelant:setProperty name="force" value="${maven.xdoclet.jdodoclet.force}"/>
            <jelant:setProperty name="verbose" value="${maven.xdoclet.jdodoclet.verbose}"/>
            <jelant:setProperty name="addedTags" value="${maven.xdoclet.jdodoclet.addedTags}"/>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.configParam.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <configParam>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.configParam.${subelement_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.configParam.${subelement_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(subelement_index_var_name)}"/>
                </configParam>
              </j:if>
            </j:forEach>

            <j:set var="fileset_index" value="0"/>
            <j:forEach begin="0" end="10" indexVar="fileset_index">
                <j:set var="fileset_index_var_name" value="maven.xdoclet.jdodoclet.fileset.${fileset_index}"/>
                <j:if test="${context.getVariable(fileset_index_var_name) != null}">
                    <j:set var="fileset_source_directory_name" value="maven.xdoclet.jdodoclet.fileset.${fileset_index}.sourcedir"/>
                    <j:if test="${context.getVariable(fileset_source_directory_name) == null}">
                        <j:set var="fileset_source_directory" value="${pom.build.sourceDirectory}"/>
                    </j:if>
                    <j:if test="${context.getVariable(fileset_source_directory_name) != null}">
                        <j:set var="fileset_source_directory" value="${context.getVariable(fileset_source_directory_name)}"/>
                    </j:if>
                    <fileset dir="${fileset_source_directory}">
                        <j:set var="fileset_index_include_var_name" value="maven.xdoclet.jdodoclet.fileset.${fileset_index}.include"/>
                        <j:set var="fileset_index_exclude_var_name" value="maven.xdoclet.jdodoclet.fileset.${fileset_index}.exclude"/>
                        <j:if test="${context.getVariable(fileset_index_include_var_name) != null}">
                            <include name="${context.getVariable(fileset_index_include_var_name)}"/>
                        </j:if>
                        <j:if test="${context.getVariable(fileset_index_exclude_var_name) != null}">
                            <exclude name="${context.getVariable(fileset_index_exclude_var_name)}"/>
                        </j:if>
                    </fileset>
                </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jdometadata>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.project"/>
                    <jelant:setProperty name="project" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.Generation"/>
					<jelant:setProperty name="Generation" value="${context.getVariable(prop_name)}"/>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.Jdospec.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Jdospec>
                    </Jdospec>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.jdometadata.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jdometadata>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <kodo>
					<j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.kodo.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                 >
                </kodo>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <lido>
					<j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.lido.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                 >
                </lido>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.packageSubstitution.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <packageSubstitution>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.packageSubstitution.${subelement_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.packageSubstitution.${subelement_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.packageSubstitution.${subelement_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(subelement_index_var_name)}"/>
                </packageSubstitution>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <subTask>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.subTask.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </subTask>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <template>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.template.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </template>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <triactive>
					<j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.jdodoclet.triactive.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                 >
                </triactive>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <xmlTemplate>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.useIds"/>
                        <jelant:setProperty name="useIds" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.xmlencoding"/>
                        <jelant:setProperty name="xmlencoding" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.schema"/>
                        <jelant:setProperty name="schema" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.validateXML"/>
                        <jelant:setProperty name="validateXML" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.jdodoclet.xmlTemplate.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </xmlTemplate>
              </j:if>
            </j:forEach>

        </jdodoclet>

        <!--
        In order to make it easier for the user of the XDoclet plugin, we automatically add the
        destination folder to the compile path. This way, people don't have to deal with maven:addPath in their own
        maven.xml scripts. This has been tested with Maven from CVS HEAD on 2002.12.15. (AH)
        -->
        <path id="jdodoclet.java.compile.src.set" location="${maven.xdoclet.jdodoclet.destDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="jdodoclet.java.compile.src.set"/>

    </goal>

    <goal
        description="portletdoclet"
        name="xdoclet:portletdoclet">

        <taskdef name="portletdoclet" classname="xdoclet.modules.portlet.PortletDocletTask">
            <classpath>

	        <path refid="maven.dependency.classpath"/>

                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xjavadoc')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet-xdoclet-module')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-collections:commons-collections')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-logging:commons-logging')}"/>
                <pathelement path="${plugin.getDependencyPath('log4j:log4j')}"/>

            </classpath>
        </taskdef>

        <portletdoclet>
		<!--
            destDir="${maven.xdoclet.portletdoclet.destDir}"
            mergeDir="${maven.xdoclet.portletdoclet.mergeDir}"
            encoding="${maven.xdoclet.portletdoclet.encoding}"
            docencoding="${maven.xdoclet.portletdoclet.docencoding}"
		   -->
            <jelant:setProperty name="excludedTags" value="${maven.xdoclet.portletdoclet.excludedTags}"/>
            <jelant:setProperty name="destDir" value="${maven.xdoclet.portletdoclet.destDir}"/>
            <jelant:setProperty name="mergeDir" value="${maven.xdoclet.portletdoclet.mergeDir}"/>
            <jelant:setProperty name="force" value="${maven.xdoclet.portletdoclet.force}"/>
            <jelant:setProperty name="verbose" value="${maven.xdoclet.portletdoclet.verbose}"/>
            <jelant:setProperty name="addedTags" value="${maven.xdoclet.portletdoclet.addedTags}"/>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.configParam.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <configParam>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.configParam.${subelement_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.configParam.${subelement_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(subelement_index_var_name)}"/>
                </configParam>
              </j:if>
            </j:forEach>

            <j:set var="fileset_index" value="0"/>
            <j:forEach begin="0" end="10" indexVar="fileset_index">
                <j:set var="fileset_index_var_name" value="maven.xdoclet.portletdoclet.fileset.${fileset_index}"/>
                <j:if test="${context.getVariable(fileset_index_var_name) != null}">
                    <j:set var="fileset_source_directory_name" value="maven.xdoclet.portletdoclet.fileset.${fileset_index}.sourcedir"/>
                    <j:if test="${context.getVariable(fileset_source_directory_name) == null}">
                        <j:set var="fileset_source_directory" value="${pom.build.sourceDirectory}"/>
                    </j:if>
                    <j:if test="${context.getVariable(fileset_source_directory_name) != null}">
                        <j:set var="fileset_source_directory" value="${context.getVariable(fileset_source_directory_name)}"/>
                    </j:if>
                    <fileset dir="${fileset_source_directory}">
                        <j:set var="fileset_index_include_var_name" value="maven.xdoclet.portletdoclet.fileset.${fileset_index}.include"/>
                        <j:set var="fileset_index_exclude_var_name" value="maven.xdoclet.portletdoclet.fileset.${fileset_index}.exclude"/>
                        <j:if test="${context.getVariable(fileset_index_include_var_name) != null}">
                            <include name="${context.getVariable(fileset_index_include_var_name)}"/>
                        </j:if>
                        <j:if test="${context.getVariable(fileset_index_exclude_var_name) != null}">
                            <exclude name="${context.getVariable(fileset_index_exclude_var_name)}"/>
                        </j:if>
                    </fileset>
                </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.packageSubstitution.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <packageSubstitution>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.packageSubstitution.${subelement_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.packageSubstitution.${subelement_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.packageSubstitution.${subelement_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(subelement_index_var_name)}"/>
                </packageSubstitution>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <portletxml>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.portletdoclet.portletxml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </portletxml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <subTask>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.subTask.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </subTask>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <template>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.template.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </template>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <xmlTemplate>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.useIds"/>
                        <jelant:setProperty name="useIds" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.xmlencoding"/>
                        <jelant:setProperty name="xmlencoding" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.schema"/>
                        <jelant:setProperty name="schema" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.validateXML"/>
                        <jelant:setProperty name="validateXML" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.portletdoclet.xmlTemplate.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </xmlTemplate>
              </j:if>
            </j:forEach>

        </portletdoclet>

        <!--
        In order to make it easier for the user of the XDoclet plugin, we automatically add the
        destination folder to the compile path. This way, people don't have to deal with maven:addPath in their own
        maven.xml scripts. This has been tested with Maven from CVS HEAD on 2002.12.15. (AH)
        -->
        <path id="portletdoclet.java.compile.src.set" location="${maven.xdoclet.portletdoclet.destDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="portletdoclet.java.compile.src.set"/>

    </goal>

    <goal
        description="webdoclet"
        name="xdoclet:webdoclet">

        <taskdef name="webdoclet" classname="xdoclet.modules.web.WebDocletTask">
            <classpath>

	        <path refid="maven.dependency.classpath"/>

                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xjavadoc')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet-xdoclet-module')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-collections:commons-collections')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-logging:commons-logging')}"/>
                <pathelement path="${plugin.getDependencyPath('log4j:log4j')}"/>

            </classpath>
        </taskdef>

        <webdoclet>
		<!--
            destDir="${maven.xdoclet.webdoclet.destDir}"
            mergeDir="${maven.xdoclet.webdoclet.mergeDir}"
            encoding="${maven.xdoclet.webdoclet.encoding}"
            docencoding="${maven.xdoclet.webdoclet.docencoding}"
		   -->
            <jelant:setProperty name="excludedTags" value="${maven.xdoclet.webdoclet.excludedTags}"/>
            <jelant:setProperty name="destDir" value="${maven.xdoclet.webdoclet.destDir}"/>
            <jelant:setProperty name="mergeDir" value="${maven.xdoclet.webdoclet.mergeDir}"/>
            <jelant:setProperty name="force" value="${maven.xdoclet.webdoclet.force}"/>
            <jelant:setProperty name="verbose" value="${maven.xdoclet.webdoclet.verbose}"/>
            <jelant:setProperty name="addedTags" value="${maven.xdoclet.webdoclet.addedTags}"/>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.configParam.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <configParam>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.configParam.${subelement_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.configParam.${subelement_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(subelement_index_var_name)}"/>
                </configParam>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <deploymentdescriptor>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.Servletspec"/>
					<jelant:setProperty name="Servletspec" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.smallicon"/>
                    <jelant:setProperty name="smallicon" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.largeicon"/>
                    <jelant:setProperty name="largeicon" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.displayname"/>
                    <jelant:setProperty name="displayname" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.description"/>
                    <jelant:setProperty name="description" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.distributable"/>
                    <jelant:setProperty name="distributable" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.sessiontimeout"/>
                    <jelant:setProperty name="sessiontimeout" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.tagLibs"/>
                    <jelant:setProperty name="tagLibs" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.welcomeFiles"/>
                    <jelant:setProperty name="welcomeFiles" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.contextParams"/>
                    <jelant:setProperty name="contextParams" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfiguredContextparam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfiguredContextparam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfiguredContextparam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfiguredContextparam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfiguredContextparam.${nested_element_index}.description"/>
                        <jelant:setProperty name="description" value="${context.getVariable(prop_name)}"/>
                    </ConfiguredContextparam>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfiguredWelcomefile.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfiguredWelcomefile>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfiguredWelcomefile.${nested_element_index}.file"/>
                        <jelant:setProperty name="file" value="${context.getVariable(prop_name)}"/>
                    </ConfiguredWelcomefile>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfiguredTaglib.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfiguredTaglib>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfiguredTaglib.${nested_element_index}.uri"/>
                        <jelant:setProperty name="uri" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfiguredTaglib.${nested_element_index}.location"/>
                        <jelant:setProperty name="location" value="${context.getVariable(prop_name)}"/>
                    </ConfiguredTaglib>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.deploymentdescriptor.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </deploymentdescriptor>
              </j:if>
            </j:forEach>

            <j:set var="fileset_index" value="0"/>
            <j:forEach begin="0" end="10" indexVar="fileset_index">
                <j:set var="fileset_index_var_name" value="maven.xdoclet.webdoclet.fileset.${fileset_index}"/>
                <j:if test="${context.getVariable(fileset_index_var_name) != null}">
                    <j:set var="fileset_source_directory_name" value="maven.xdoclet.webdoclet.fileset.${fileset_index}.sourcedir"/>
                    <j:if test="${context.getVariable(fileset_source_directory_name) == null}">
                        <j:set var="fileset_source_directory" value="${pom.build.sourceDirectory}"/>
                    </j:if>
                    <j:if test="${context.getVariable(fileset_source_directory_name) != null}">
                        <j:set var="fileset_source_directory" value="${context.getVariable(fileset_source_directory_name)}"/>
                    </j:if>
                    <fileset dir="${fileset_source_directory}">
                        <j:set var="fileset_index_include_var_name" value="maven.xdoclet.webdoclet.fileset.${fileset_index}.include"/>
                        <j:set var="fileset_index_exclude_var_name" value="maven.xdoclet.webdoclet.fileset.${fileset_index}.exclude"/>
                        <j:if test="${context.getVariable(fileset_index_include_var_name) != null}">
                            <include name="${context.getVariable(fileset_index_include_var_name)}"/>
                        </j:if>
                        <j:if test="${context.getVariable(fileset_index_exclude_var_name) != null}">
                            <exclude name="${context.getVariable(fileset_index_exclude_var_name)}"/>
                        </j:if>
                    </fileset>
                </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jbosswebxml>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.securitydomain"/>
                    <jelant:setProperty name="securitydomain" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.contextroot"/>
                    <jelant:setProperty name="contextroot" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.virtualhost"/>
                    <jelant:setProperty name="virtualhost" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jbosswebxml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jbosswebxml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jonaswebxml>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.contextroot"/>
                    <jelant:setProperty name="contextroot" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.host"/>
                    <jelant:setProperty name="host" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jonaswebxml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jonaswebxml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jrunwebxml>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.contextRoot"/>
                    <jelant:setProperty name="contextRoot" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.reload"/>
                    <jelant:setProperty name="reload" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.compile"/>
                    <jelant:setProperty name="compile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.loadSystemClassesFirst"/>
                    <jelant:setProperty name="loadSystemClassesFirst" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jrunwebxml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jrunwebxml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jsptaglib>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.Jspversion"/>
					<jelant:setProperty name="Jspversion" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.taglibversion"/>
                    <jelant:setProperty name="taglibversion" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.shortname"/>
                    <jelant:setProperty name="shortname" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.uri"/>
                    <jelant:setProperty name="uri" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.displayname"/>
                    <jelant:setProperty name="displayname" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.smallicon"/>
                    <jelant:setProperty name="smallicon" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.largeicon"/>
                    <jelant:setProperty name="largeicon" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.description"/>
                    <jelant:setProperty name="description" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.filename"/>
                    <jelant:setProperty name="filename" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.jsptaglib.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jsptaglib>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.packageSubstitution.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <packageSubstitution>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.packageSubstitution.${subelement_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.packageSubstitution.${subelement_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.packageSubstitution.${subelement_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(subelement_index_var_name)}"/>
                </packageSubstitution>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <resin-web-xml>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.appDir"/>
                    <jelant:setProperty name="appDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.charEncoding"/>
                    <jelant:setProperty name="charEncoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.classUpdateInterval"/>
                    <jelant:setProperty name="classUpdateInterval" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.configUpdateInterval"/>
                    <jelant:setProperty name="configUpdateInterval" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.directoryServlet"/>
                    <jelant:setProperty name="directoryServlet" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.generateSourceComments"/>
                    <jelant:setProperty name="generateSourceComments" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.id"/>
                    <jelant:setProperty name="id" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.lazyInit"/>
                    <jelant:setProperty name="lazyInit" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.searchForConfigElements"/>
                    <jelant:setProperty name="searchForConfigElements" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.secure"/>
                    <jelant:setProperty name="secure" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.tempDir"/>
                    <jelant:setProperty name="tempDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.urlRegexp"/>
                    <jelant:setProperty name="urlRegexp" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.useStandardMergeFiles"/>
                    <jelant:setProperty name="useStandardMergeFiles" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.workDir"/>
                    <jelant:setProperty name="workDir" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.Servletspec"/>
					<jelant:setProperty name="Servletspec" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.smallicon"/>
                    <jelant:setProperty name="smallicon" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.largeicon"/>
                    <jelant:setProperty name="largeicon" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.displayname"/>
                    <jelant:setProperty name="displayname" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.description"/>
                    <jelant:setProperty name="description" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.distributable"/>
                    <jelant:setProperty name="distributable" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.sessiontimeout"/>
                    <jelant:setProperty name="sessiontimeout" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.tagLibs"/>
                    <jelant:setProperty name="tagLibs" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.welcomeFiles"/>
                    <jelant:setProperty name="welcomeFiles" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.contextParams"/>
                    <jelant:setProperty name="contextParams" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfiguredContextparam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfiguredContextparam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfiguredContextparam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfiguredContextparam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfiguredContextparam.${nested_element_index}.description"/>
                        <jelant:setProperty name="description" value="${context.getVariable(prop_name)}"/>
                    </ConfiguredContextparam>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfiguredWelcomefile.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfiguredWelcomefile>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfiguredWelcomefile.${nested_element_index}.file"/>
                        <jelant:setProperty name="file" value="${context.getVariable(prop_name)}"/>
                    </ConfiguredWelcomefile>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfiguredTaglib.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfiguredTaglib>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfiguredTaglib.${nested_element_index}.uri"/>
                        <jelant:setProperty name="uri" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfiguredTaglib.${nested_element_index}.location"/>
                        <jelant:setProperty name="location" value="${context.getVariable(prop_name)}"/>
                    </ConfiguredTaglib>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.resin-web-xml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </resin-web-xml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <strutsconfigxml>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.controller"/>
                    <jelant:setProperty name="controller" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsconfigxml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </strutsconfigxml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <strutsvalidationxml>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.strutsvalidationxml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </strutsvalidationxml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <subTask>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.subTask.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </subTask>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <template>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.template.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </template>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <weblogicwebxml>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.version"/>
                    <jelant:setProperty name="version" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.securitydomain"/>
                    <jelant:setProperty name="securitydomain" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.description"/>
                    <jelant:setProperty name="description" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.contextRoot"/>
                    <jelant:setProperty name="contextRoot" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.weblogicwebxml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </weblogicwebxml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <webspherewebxml>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.virtualHostName"/>
                    <jelant:setProperty name="virtualHostName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.reloadInterval"/>
                    <jelant:setProperty name="reloadInterval" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.reloadingEnabled"/>
                    <jelant:setProperty name="reloadingEnabled" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.defaultErrorPage"/>
                    <jelant:setProperty name="defaultErrorPage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.fileServingEnabled"/>
                    <jelant:setProperty name="fileServingEnabled" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.directoryBrowsingEnabled"/>
                    <jelant:setProperty name="directoryBrowsingEnabled" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.serveServletsByClassnameEnabled"/>
                    <jelant:setProperty name="serveServletsByClassnameEnabled" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.additionalClassPath"/>
                    <jelant:setProperty name="additionalClassPath" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webspherewebxml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </webspherewebxml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <webworkactiondocs>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.javadocDir"/>
                    <jelant:setProperty name="javadocDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactiondocs.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </webworkactiondocs>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <webworkactionsxml>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkactionsxml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </webworkactionsxml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <webworkconfigproperties>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.webdoclet.webworkconfigproperties.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </webworkconfigproperties>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <xmlTemplate>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.useIds"/>
                        <jelant:setProperty name="useIds" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.xmlencoding"/>
                        <jelant:setProperty name="xmlencoding" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.schema"/>
                        <jelant:setProperty name="schema" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.validateXML"/>
                        <jelant:setProperty name="validateXML" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.webdoclet.xmlTemplate.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </xmlTemplate>
              </j:if>
            </j:forEach>

        </webdoclet>

        <!--
        In order to make it easier for the user of the XDoclet plugin, we automatically add the
        destination folder to the compile path. This way, people don't have to deal with maven:addPath in their own
        maven.xml scripts. This has been tested with Maven from CVS HEAD on 2002.12.15. (AH)
        -->
        <path id="webdoclet.java.compile.src.set" location="${maven.xdoclet.webdoclet.destDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="webdoclet.java.compile.src.set"/>

    </goal>

    <goal
        description="documentdoclet"
        name="xdoclet:documentdoclet">

        <taskdef name="documentdoclet" classname="xdoclet.modules.doc.DocumentDocletTask">
            <classpath>

	        <path refid="maven.dependency.classpath"/>

                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xjavadoc')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet-xdoclet-module')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-collections:commons-collections')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-logging:commons-logging')}"/>
                <pathelement path="${plugin.getDependencyPath('log4j:log4j')}"/>

            </classpath>
        </taskdef>

        <documentdoclet>
		<!--
            destDir="${maven.xdoclet.documentdoclet.destDir}"
            mergeDir="${maven.xdoclet.documentdoclet.mergeDir}"
            encoding="${maven.xdoclet.documentdoclet.encoding}"
            docencoding="${maven.xdoclet.documentdoclet.docencoding}"
		   -->
            <jelant:setProperty name="excludedTags" value="${maven.xdoclet.documentdoclet.excludedTags}"/>
            <jelant:setProperty name="destDir" value="${maven.xdoclet.documentdoclet.destDir}"/>
            <jelant:setProperty name="mergeDir" value="${maven.xdoclet.documentdoclet.mergeDir}"/>
            <jelant:setProperty name="force" value="${maven.xdoclet.documentdoclet.force}"/>
            <jelant:setProperty name="verbose" value="${maven.xdoclet.documentdoclet.verbose}"/>
            <jelant:setProperty name="addedTags" value="${maven.xdoclet.documentdoclet.addedTags}"/>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.configParam.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <configParam>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.configParam.${subelement_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.configParam.${subelement_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(subelement_index_var_name)}"/>
                </configParam>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <documenttags>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.documenttags.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </documenttags>
              </j:if>
            </j:forEach>

            <j:set var="fileset_index" value="0"/>
            <j:forEach begin="0" end="10" indexVar="fileset_index">
                <j:set var="fileset_index_var_name" value="maven.xdoclet.documentdoclet.fileset.${fileset_index}"/>
                <j:if test="${context.getVariable(fileset_index_var_name) != null}">
                    <j:set var="fileset_source_directory_name" value="maven.xdoclet.documentdoclet.fileset.${fileset_index}.sourcedir"/>
                    <j:if test="${context.getVariable(fileset_source_directory_name) == null}">
                        <j:set var="fileset_source_directory" value="${pom.build.sourceDirectory}"/>
                    </j:if>
                    <j:if test="${context.getVariable(fileset_source_directory_name) != null}">
                        <j:set var="fileset_source_directory" value="${context.getVariable(fileset_source_directory_name)}"/>
                    </j:if>
                    <fileset dir="${fileset_source_directory}">
                        <j:set var="fileset_index_include_var_name" value="maven.xdoclet.documentdoclet.fileset.${fileset_index}.include"/>
                        <j:set var="fileset_index_exclude_var_name" value="maven.xdoclet.documentdoclet.fileset.${fileset_index}.exclude"/>
                        <j:if test="${context.getVariable(fileset_index_include_var_name) != null}">
                            <include name="${context.getVariable(fileset_index_include_var_name)}"/>
                        </j:if>
                        <j:if test="${context.getVariable(fileset_index_exclude_var_name) != null}">
                            <exclude name="${context.getVariable(fileset_index_exclude_var_name)}"/>
                        </j:if>
                    </fileset>
                </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <info>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.header"/>
                    <jelant:setProperty name="header" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.tag"/>
                    <jelant:setProperty name="tag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.projectname"/>
                    <jelant:setProperty name="projectname" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.documentdoclet.info.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </info>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.packageSubstitution.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <packageSubstitution>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.packageSubstitution.${subelement_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.packageSubstitution.${subelement_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.packageSubstitution.${subelement_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(subelement_index_var_name)}"/>
                </packageSubstitution>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <subTask>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.subTask.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </subTask>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <template>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.template.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </template>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <xmlTemplate>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.useIds"/>
                        <jelant:setProperty name="useIds" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.xmlencoding"/>
                        <jelant:setProperty name="xmlencoding" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.schema"/>
                        <jelant:setProperty name="schema" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.validateXML"/>
                        <jelant:setProperty name="validateXML" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.documentdoclet.xmlTemplate.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </xmlTemplate>
              </j:if>
            </j:forEach>

        </documentdoclet>

        <!--
        In order to make it easier for the user of the XDoclet plugin, we automatically add the
        destination folder to the compile path. This way, people don't have to deal with maven:addPath in their own
        maven.xml scripts. This has been tested with Maven from CVS HEAD on 2002.12.15. (AH)
        -->
        <path id="documentdoclet.java.compile.src.set" location="${maven.xdoclet.documentdoclet.destDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="documentdoclet.java.compile.src.set"/>

    </goal>

    <goal
        description="ejbdoclet"
        name="xdoclet:ejbdoclet">

        <taskdef name="ejbdoclet" classname="xdoclet.modules.ejb.EjbDocletTask">
            <classpath>

	        <path refid="maven.dependency.classpath"/>

                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xjavadoc')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet-xdoclet-module')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-collections:commons-collections')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-logging:commons-logging')}"/>
                <pathelement path="${plugin.getDependencyPath('log4j:log4j')}"/>

            </classpath>
        </taskdef>

        <ejbdoclet>
		<!--
            destDir="${maven.xdoclet.ejbdoclet.destDir}"
            mergeDir="${maven.xdoclet.ejbdoclet.mergeDir}"
            encoding="${maven.xdoclet.ejbdoclet.encoding}"
            docencoding="${maven.xdoclet.ejbdoclet.docencoding}"
		   -->
            <jelant:setProperty name="ejbSpec" value="${maven.xdoclet.ejbdoclet.ejbSpec}"/>
            <jelant:setProperty name="ejbClassNameSuffix" value="${maven.xdoclet.ejbdoclet.ejbClassNameSuffix}"/>
            <jelant:setProperty name="excludedTags" value="${maven.xdoclet.ejbdoclet.excludedTags}"/>
            <jelant:setProperty name="destDir" value="${maven.xdoclet.ejbdoclet.destDir}"/>
            <jelant:setProperty name="mergeDir" value="${maven.xdoclet.ejbdoclet.mergeDir}"/>
            <jelant:setProperty name="force" value="${maven.xdoclet.ejbdoclet.force}"/>
            <jelant:setProperty name="verbose" value="${maven.xdoclet.ejbdoclet.verbose}"/>
            <jelant:setProperty name="addedTags" value="${maven.xdoclet.ejbdoclet.addedTags}"/>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <apachesoap>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.statelessSessionEjbProvider"/>
                    <jelant:setProperty name="statelessSessionEjbProvider" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.statefulSessionEjbProvider"/>
                    <jelant:setProperty name="statefulSessionEjbProvider" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.entityEjbProvider"/>
                    <jelant:setProperty name="entityEjbProvider" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.Providerclasspath.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Providerclasspath>
                    </Providerclasspath>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.contextProviderUrl"/>
                    <jelant:setProperty name="contextProviderUrl" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.contextFactoryName"/>
                    <jelant:setProperty name="contextFactoryName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.apachesoap.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </apachesoap>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <axisdeploy>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.contextFactoryName"/>
                    <jelant:setProperty name="contextFactoryName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.contextProviderUrl"/>
                    <jelant:setProperty name="contextProviderUrl" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisdeploy.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </axisdeploy>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <axisundeploy>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.axisundeploy.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </axisundeploy>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <borland>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.version"/>
                    <jelant:setProperty name="version" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.createtables"/>
                    <jelant:setProperty name="createtables" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.datasource"/>
                    <jelant:setProperty name="datasource" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.datasourceMapping"/>
                    <jelant:setProperty name="datasourceMapping" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.borland.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </borland>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <castormapping>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.castormapping.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </castormapping>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.configParam.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <configParam>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.configParam.${subelement_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.configParam.${subelement_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(subelement_index_var_name)}"/>
                </configParam>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <dao>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dao.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </dao>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <dataobject>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.dataobject.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </dataobject>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <deploymentdescriptor>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.smallicon"/>
                    <jelant:setProperty name="smallicon" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.largeicon"/>
                    <jelant:setProperty name="largeicon" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.displayname"/>
                    <jelant:setProperty name="displayname" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.description"/>
                    <jelant:setProperty name="description" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.clientjar"/>
                    <jelant:setProperty name="clientjar" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.deploymentdescriptor.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </deploymentdescriptor>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <easerver>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.version"/>
                    <jelant:setProperty name="version" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.packageName"/>
                    <jelant:setProperty name="packageName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.packageDescription"/>
                    <jelant:setProperty name="packageDescription" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.easerver.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </easerver>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <entitybmp>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitybmp.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </entitybmp>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <entitycmp>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.CmpSpec"/>
					<jelant:setProperty name="CmpSpec" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitycmp.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </entitycmp>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <entityfacade>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.ejbNamePattern"/>
                    <jelant:setProperty name="ejbNamePattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entityfacade.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </entityfacade>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <entitypk>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.entitypk.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </entitypk>
              </j:if>
            </j:forEach>

            <j:set var="fileset_index" value="0"/>
            <j:forEach begin="0" end="10" indexVar="fileset_index">
                <j:set var="fileset_index_var_name" value="maven.xdoclet.ejbdoclet.fileset.${fileset_index}"/>
                <j:if test="${context.getVariable(fileset_index_var_name) != null}">
                    <j:set var="fileset_source_directory_name" value="maven.xdoclet.ejbdoclet.fileset.${fileset_index}.sourcedir"/>
                    <j:if test="${context.getVariable(fileset_source_directory_name) == null}">
                        <j:set var="fileset_source_directory" value="${pom.build.sourceDirectory}"/>
                    </j:if>
                    <j:if test="${context.getVariable(fileset_source_directory_name) != null}">
                        <j:set var="fileset_source_directory" value="${context.getVariable(fileset_source_directory_name)}"/>
                    </j:if>
                    <fileset dir="${fileset_source_directory}">
                        <j:set var="fileset_index_include_var_name" value="maven.xdoclet.ejbdoclet.fileset.${fileset_index}.include"/>
                        <j:set var="fileset_index_exclude_var_name" value="maven.xdoclet.ejbdoclet.fileset.${fileset_index}.exclude"/>
                        <j:if test="${context.getVariable(fileset_index_include_var_name) != null}">
                            <include name="${context.getVariable(fileset_index_include_var_name)}"/>
                        </j:if>
                        <j:if test="${context.getVariable(fileset_index_exclude_var_name) != null}">
                            <exclude name="${context.getVariable(fileset_index_exclude_var_name)}"/>
                        </j:if>
                    </fileset>
                </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <homeinterface>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.homeinterface.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </homeinterface>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <hpas>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.sfsbPassivationRoot"/>
                    <jelant:setProperty name="sfsbPassivationRoot" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.persistenceProduct"/>
                    <jelant:setProperty name="persistenceProduct" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.persistenceVersion"/>
                    <jelant:setProperty name="persistenceVersion" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.persistenceClass"/>
                    <jelant:setProperty name="persistenceClass" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.persistenceSuffix"/>
                    <jelant:setProperty name="persistenceSuffix" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.hpas.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </hpas>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jboss>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.jbossTemplateFile"/>
                    <jelant:setProperty name="jbossTemplateFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.jawsTemplateFile"/>
                    <jelant:setProperty name="jawsTemplateFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.jbosscmpTemplateFile"/>
                    <jelant:setProperty name="jbosscmpTemplateFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.debug"/>
                    <jelant:setProperty name="debug" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.securityDomain"/>
                    <jelant:setProperty name="securityDomain" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.unauthenticatedPrincipal"/>
                    <jelant:setProperty name="unauthenticatedPrincipal" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.datasource"/>
                    <jelant:setProperty name="datasource" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.datasourceMapping"/>
                    <jelant:setProperty name="datasourceMapping" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.typemapping"/>
                    <jelant:setProperty name="typemapping" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.generateRelations"/>
                    <jelant:setProperty name="generateRelations" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.preferredRelationMapping"/>
                    <jelant:setProperty name="preferredRelationMapping" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.createTable"/>
                    <jelant:setProperty name="createTable" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.removeTable"/>
                    <jelant:setProperty name="removeTable" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jboss.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jboss>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jonas>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jonas.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jonas>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jrun>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.source"/>
                    <jelant:setProperty name="source" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.version"/>
                    <jelant:setProperty name="version" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.createtables"/>
                    <jelant:setProperty name="createtables" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.jrun.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jrun>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <localhomeinterface>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localhomeinterface.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </localhomeinterface>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <localinterface>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.localinterface.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </localinterface>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <mvcsoft>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.DeploymentVersion"/>
					<jelant:setProperty name="DeploymentVersion" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.connectionjndiname"/>
                    <jelant:setProperty name="connectionjndiname" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.loggingtype"/>
                    <jelant:setProperty name="loggingtype" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.lightweightfactoryname"/>
                    <jelant:setProperty name="lightweightfactoryname" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.mvcsoft.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </mvcsoft>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <oc4j>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.oc4j.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </oc4j>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <openejb>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.openEJBTemplateFile"/>
                    <jelant:setProperty name="openEJBTemplateFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.openejb.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </openejb>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <orion>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.orion.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </orion>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.packageSubstitution.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <packageSubstitution>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.packageSubstitution.${subelement_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.packageSubstitution.${subelement_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.packageSubstitution.${subelement_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(subelement_index_var_name)}"/>
                </packageSubstitution>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <pramati>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.datasource"/>
                    <jelant:setProperty name="datasource" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.version"/>
                    <jelant:setProperty name="version" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.jarName"/>
                    <jelant:setProperty name="jarName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.pramati.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </pramati>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <remotefacade>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remotefacade.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </remotefacade>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <remoteinterface>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.remoteinterface.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </remoteinterface>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <resin-ejb-xml>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.cacheSize"/>
                    <jelant:setProperty name="cacheSize" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.cacheTimeout"/>
                    <jelant:setProperty name="cacheTimeout" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.generateSourceComments"/>
                    <jelant:setProperty name="generateSourceComments" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.resin-ejb-xml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </resin-ejb-xml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <session>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.session.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </session>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <strutsform>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.currentFormTag"/>
                    <jelant:setProperty name="currentFormTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.strutsform.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </strutsform>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <subTask>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.subTask.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </subTask>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <sunone>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.transactionManagerType"/>
                    <jelant:setProperty name="transactionManagerType" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.cmpResourceJndiName"/>
                    <jelant:setProperty name="cmpResourceJndiName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.cmpResourcePrincipalName"/>
                    <jelant:setProperty name="cmpResourcePrincipalName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.cmpResourcePrincipalPassword"/>
                    <jelant:setProperty name="cmpResourcePrincipalPassword" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.cmpSchema"/>
                    <jelant:setProperty name="cmpSchema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.cmpTemplateFile"/>
                    <jelant:setProperty name="cmpTemplateFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.cmpDestinationFile"/>
                    <jelant:setProperty name="cmpDestinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.sunone.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </sunone>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <template>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.template.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </template>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <utilobject>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.localProxies"/>
                    <jelant:setProperty name="localProxies" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.Kind"/>
					<jelant:setProperty name="Kind" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.includeGUID"/>
                    <jelant:setProperty name="includeGUID" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.cacheHomes"/>
                    <jelant:setProperty name="cacheHomes" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.utilobject.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </utilobject>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <valueobject>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.pattern"/>
                    <jelant:setProperty name="pattern" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.generatePKConstructor"/>
                    <jelant:setProperty name="generatePKConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.valueobject.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </valueobject>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <weblogic>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.DatabaseType"/>
					<jelant:setProperty name="DatabaseType" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.poolname"/>
                    <jelant:setProperty name="poolname" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.datasource"/>
                    <jelant:setProperty name="datasource" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.persistence"/>
                    <jelant:setProperty name="persistence" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.createtables"/>
                    <jelant:setProperty name="createtables" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.ValidateDbSchemaWith"/>
					<jelant:setProperty name="ValidateDbSchemaWith" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.weblogic.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </weblogic>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <websphere>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.ejbdoclet.websphere.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </websphere>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <xmlTemplate>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.useIds"/>
                        <jelant:setProperty name="useIds" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.xmlencoding"/>
                        <jelant:setProperty name="xmlencoding" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.schema"/>
                        <jelant:setProperty name="schema" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.validateXML"/>
                        <jelant:setProperty name="validateXML" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.ejbdoclet.xmlTemplate.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </xmlTemplate>
              </j:if>
            </j:forEach>

        </ejbdoclet>

        <!--
        In order to make it easier for the user of the XDoclet plugin, we automatically add the
        destination folder to the compile path. This way, people don't have to deal with maven:addPath in their own
        maven.xml scripts. This has been tested with Maven from CVS HEAD on 2002.12.15. (AH)
        -->
        <path id="ejbdoclet.java.compile.src.set" location="${maven.xdoclet.ejbdoclet.destDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="ejbdoclet.java.compile.src.set"/>

    </goal>

    <goal
        description="springdoclet"
        name="xdoclet:springdoclet">

        <taskdef name="springdoclet" classname="xdoclet.modules.spring.SpringDocletTask">
            <classpath>

	        <path refid="maven.dependency.classpath"/>

                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xjavadoc')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet-xdoclet-module')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-collections:commons-collections')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-logging:commons-logging')}"/>
                <pathelement path="${plugin.getDependencyPath('log4j:log4j')}"/>

            </classpath>
        </taskdef>

        <springdoclet>
		<!--
            destDir="${maven.xdoclet.springdoclet.destDir}"
            mergeDir="${maven.xdoclet.springdoclet.mergeDir}"
            encoding="${maven.xdoclet.springdoclet.encoding}"
            docencoding="${maven.xdoclet.springdoclet.docencoding}"
		   -->
            <jelant:setProperty name="excludedTags" value="${maven.xdoclet.springdoclet.excludedTags}"/>
            <jelant:setProperty name="destDir" value="${maven.xdoclet.springdoclet.destDir}"/>
            <jelant:setProperty name="mergeDir" value="${maven.xdoclet.springdoclet.mergeDir}"/>
            <jelant:setProperty name="force" value="${maven.xdoclet.springdoclet.force}"/>
            <jelant:setProperty name="verbose" value="${maven.xdoclet.springdoclet.verbose}"/>
            <jelant:setProperty name="addedTags" value="${maven.xdoclet.springdoclet.addedTags}"/>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.configParam.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <configParam>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.configParam.${subelement_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.configParam.${subelement_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(subelement_index_var_name)}"/>
                </configParam>
              </j:if>
            </j:forEach>

            <j:set var="fileset_index" value="0"/>
            <j:forEach begin="0" end="10" indexVar="fileset_index">
                <j:set var="fileset_index_var_name" value="maven.xdoclet.springdoclet.fileset.${fileset_index}"/>
                <j:if test="${context.getVariable(fileset_index_var_name) != null}">
                    <j:set var="fileset_source_directory_name" value="maven.xdoclet.springdoclet.fileset.${fileset_index}.sourcedir"/>
                    <j:if test="${context.getVariable(fileset_source_directory_name) == null}">
                        <j:set var="fileset_source_directory" value="${pom.build.sourceDirectory}"/>
                    </j:if>
                    <j:if test="${context.getVariable(fileset_source_directory_name) != null}">
                        <j:set var="fileset_source_directory" value="${context.getVariable(fileset_source_directory_name)}"/>
                    </j:if>
                    <fileset dir="${fileset_source_directory}">
                        <j:set var="fileset_index_include_var_name" value="maven.xdoclet.springdoclet.fileset.${fileset_index}.include"/>
                        <j:set var="fileset_index_exclude_var_name" value="maven.xdoclet.springdoclet.fileset.${fileset_index}.exclude"/>
                        <j:if test="${context.getVariable(fileset_index_include_var_name) != null}">
                            <include name="${context.getVariable(fileset_index_include_var_name)}"/>
                        </j:if>
                        <j:if test="${context.getVariable(fileset_index_exclude_var_name) != null}">
                            <exclude name="${context.getVariable(fileset_index_exclude_var_name)}"/>
                        </j:if>
                    </fileset>
                </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.packageSubstitution.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <packageSubstitution>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.packageSubstitution.${subelement_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.packageSubstitution.${subelement_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.packageSubstitution.${subelement_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(subelement_index_var_name)}"/>
                </packageSubstitution>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <springxml>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.defaultAutowire"/>
                    <jelant:setProperty name="defaultAutowire" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.defaultDependencyCheck"/>
                    <jelant:setProperty name="defaultDependencyCheck" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.defaultLazyInit"/>
                    <jelant:setProperty name="defaultLazyInit" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.springdoclet.springxml.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </springxml>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <subTask>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.subTask.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </subTask>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <template>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.template.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </template>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <xmlTemplate>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.useIds"/>
                        <jelant:setProperty name="useIds" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.xmlencoding"/>
                        <jelant:setProperty name="xmlencoding" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.schema"/>
                        <jelant:setProperty name="schema" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.validateXML"/>
                        <jelant:setProperty name="validateXML" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.springdoclet.xmlTemplate.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </xmlTemplate>
              </j:if>
            </j:forEach>

        </springdoclet>

        <!--
        In order to make it easier for the user of the XDoclet plugin, we automatically add the
        destination folder to the compile path. This way, people don't have to deal with maven:addPath in their own
        maven.xml scripts. This has been tested with Maven from CVS HEAD on 2002.12.15. (AH)
        -->
        <path id="springdoclet.java.compile.src.set" location="${maven.xdoclet.springdoclet.destDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="springdoclet.java.compile.src.set"/>

    </goal>

    <goal
        description="hibernatedoclet"
        name="xdoclet:hibernatedoclet">

        <taskdef name="hibernatedoclet" classname="xdoclet.modules.hibernate.HibernateDocletTask">
            <classpath>

	        <path refid="maven.dependency.classpath"/>

                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xjavadoc')}"/>
                <pathelement path="${plugin.getDependencyPath('xdoclet:xdoclet-xdoclet-module')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-collections:commons-collections')}"/>
                <pathelement path="${plugin.getDependencyPath('commons-logging:commons-logging')}"/>
                <pathelement path="${plugin.getDependencyPath('log4j:log4j')}"/>

            </classpath>
        </taskdef>

        <hibernatedoclet>
		<!--
            destDir="${maven.xdoclet.hibernatedoclet.destDir}"
            mergeDir="${maven.xdoclet.hibernatedoclet.mergeDir}"
            encoding="${maven.xdoclet.hibernatedoclet.encoding}"
            docencoding="${maven.xdoclet.hibernatedoclet.docencoding}"
		   -->
            <jelant:setProperty name="excludedTags" value="${maven.xdoclet.hibernatedoclet.excludedTags}"/>
            <jelant:setProperty name="destDir" value="${maven.xdoclet.hibernatedoclet.destDir}"/>
            <jelant:setProperty name="mergeDir" value="${maven.xdoclet.hibernatedoclet.mergeDir}"/>
            <jelant:setProperty name="force" value="${maven.xdoclet.hibernatedoclet.force}"/>
            <jelant:setProperty name="verbose" value="${maven.xdoclet.hibernatedoclet.verbose}"/>
            <jelant:setProperty name="addedTags" value="${maven.xdoclet.hibernatedoclet.addedTags}"/>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.configParam.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <configParam>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.configParam.${subelement_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.configParam.${subelement_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(subelement_index_var_name)}"/>
                </configParam>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <factoryclass>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.jdbcUrl"/>
                    <jelant:setProperty name="jdbcUrl" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.poolSize"/>
                    <jelant:setProperty name="poolSize" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.dataSource"/>
                    <jelant:setProperty name="dataSource" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.dialect"/>
                    <jelant:setProperty name="dialect" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.driver"/>
                    <jelant:setProperty name="driver" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.password"/>
                    <jelant:setProperty name="password" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.username"/>
                    <jelant:setProperty name="username" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.factoryClass"/>
                    <jelant:setProperty name="factoryClass" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.useJndiFactory"/>
                    <jelant:setProperty name="useJndiFactory" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.factoryclass.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </factoryclass>
              </j:if>
            </j:forEach>

            <j:set var="fileset_index" value="0"/>
            <j:forEach begin="0" end="10" indexVar="fileset_index">
                <j:set var="fileset_index_var_name" value="maven.xdoclet.hibernatedoclet.fileset.${fileset_index}"/>
                <j:if test="${context.getVariable(fileset_index_var_name) != null}">
                    <j:set var="fileset_source_directory_name" value="maven.xdoclet.hibernatedoclet.fileset.${fileset_index}.sourcedir"/>
                    <j:if test="${context.getVariable(fileset_source_directory_name) == null}">
                        <j:set var="fileset_source_directory" value="${pom.build.sourceDirectory}"/>
                    </j:if>
                    <j:if test="${context.getVariable(fileset_source_directory_name) != null}">
                        <j:set var="fileset_source_directory" value="${context.getVariable(fileset_source_directory_name)}"/>
                    </j:if>
                    <fileset dir="${fileset_source_directory}">
                        <j:set var="fileset_index_include_var_name" value="maven.xdoclet.hibernatedoclet.fileset.${fileset_index}.include"/>
                        <j:set var="fileset_index_exclude_var_name" value="maven.xdoclet.hibernatedoclet.fileset.${fileset_index}.exclude"/>
                        <j:if test="${context.getVariable(fileset_index_include_var_name) != null}">
                            <include name="${context.getVariable(fileset_index_include_var_name)}"/>
                        </j:if>
                        <j:if test="${context.getVariable(fileset_index_exclude_var_name) != null}">
                            <exclude name="${context.getVariable(fileset_index_exclude_var_name)}"/>
                        </j:if>
                    </fileset>
                </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <hibernate>
					<j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.Version"/>
					<jelant:setProperty name="Version" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernate.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </hibernate>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <hibernatecfg>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.poolSize"/>
                    <jelant:setProperty name="poolSize" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.jdbcUrl"/>
                    <jelant:setProperty name="jdbcUrl" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.transactionManagerStrategy"/>
                    <jelant:setProperty name="transactionManagerStrategy" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.userTransactionName"/>
                    <jelant:setProperty name="userTransactionName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.transactionManagerLookup"/>
                    <jelant:setProperty name="transactionManagerLookup" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.useOuterJoin"/>
                    <jelant:setProperty name="useOuterJoin" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.showSql"/>
                    <jelant:setProperty name="showSql" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.jndiName"/>
                    <jelant:setProperty name="jndiName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.dataSource"/>
                    <jelant:setProperty name="dataSource" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.dialect"/>
                    <jelant:setProperty name="dialect" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.driver"/>
                    <jelant:setProperty name="driver" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.userName"/>
                    <jelant:setProperty name="userName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.password"/>
                    <jelant:setProperty name="password" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.ConfiguredJndiProperty.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfiguredJndiProperty>
                    </ConfiguredJndiProperty>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.hibernatecfg.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </hibernatecfg>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) == 'true'}">
                <jbossservice>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.transactionManagerStrategy"/>
                    <jelant:setProperty name="transactionManagerStrategy" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.userTransactionName"/>
                    <jelant:setProperty name="userTransactionName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.transactionStrategy"/>
                    <jelant:setProperty name="transactionStrategy" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.cacheProvider"/>
                    <jelant:setProperty name="cacheProvider" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.depends"/>
                    <jelant:setProperty name="depends" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.userName"/>
                    <jelant:setProperty name="userName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.password"/>
                    <jelant:setProperty name="password" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.useOuterJoin"/>
                    <jelant:setProperty name="useOuterJoin" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.showSql"/>
                    <jelant:setProperty name="showSql" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.serviceName"/>
                    <jelant:setProperty name="serviceName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.jndiName"/>
                    <jelant:setProperty name="jndiName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.dataSource"/>
                    <jelant:setProperty name="dataSource" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.dialect"/>
                    <jelant:setProperty name="dialect" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.useIds"/>
                    <jelant:setProperty name="useIds" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.xmlencoding"/>
                    <jelant:setProperty name="xmlencoding" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.schema"/>
                    <jelant:setProperty name="schema" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.validateXML"/>
                    <jelant:setProperty name="validateXML" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.acceptInterfaces"/>
                    <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.acceptAbstractClasses"/>
                    <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.packageSubstitutions"/>
                    <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                    <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.subTaskClassName"/>
                    <jelant:setProperty name="subTaskClassName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.prefixWithPackageStructure"/>
                    <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.Engine.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <Engine>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.Engine.${nested_element_index}.XJavaDoc"/>
                        <jelant:setProperty name="XJavaDoc" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.Engine.${nested_element_index}.writer"/>
                        <jelant:setProperty name="writer" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.Engine.${nested_element_index}.currentLineNum"/>
                        <jelant:setProperty name="currentLineNum" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.Engine.${nested_element_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.Engine.${nested_element_index}.output"/>
                        <jelant:setProperty name="output" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.Engine.${nested_element_index}.docEncoding"/>
                        <jelant:setProperty name="docEncoding" value="${context.getVariable(prop_name)}"/>
                    </Engine>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.destinationFile"/>
                    <jelant:setProperty name="destinationFile" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.templateURL"/>
                    <jelant:setProperty name="templateURL" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.templateFile"/>
                    <jelant:setProperty name="templateFile" value="${context.getVariable(prop_name)}"/>
					<j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.Extent"/>
					<jelant:setProperty name="Extent" value="${context.getVariable(prop_name)}"/>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.havingClassTag"/>
                    <jelant:setProperty name="havingClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.ofType"/>
                    <jelant:setProperty name="ofType" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.OfType.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <OfType>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.OfType.${nested_element_index}.type"/>
                        <jelant:setProperty name="type" value="${context.getVariable(prop_name)}"/>
                    </OfType>
                    </j:if>
                </j:forEach>

                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.PackageSubstitution.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <PackageSubstitution>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.PackageSubstitution.${nested_element_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.PackageSubstitution.${nested_element_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.PackageSubstitution.${nested_element_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(prop_name)}"/>
                    </PackageSubstitution>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.subTaskName"/>
                    <jelant:setProperty name="subTaskName" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.destDir"/>
                    <jelant:setProperty name="destDir" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.mergeDir"/>
                    <jelant:setProperty name="mergeDir" value="${context.getVariable(prop_name)}"/>
                <j:set var="nested_element_index" value="0"/>
                <j:forEach begin="0" end="10" indexVar="nested_element_index">
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.ConfigParam.${nested_element_index}"/>
                    <j:if test="${context.getVariable(prop_name) != null}">
                    <ConfigParam>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.ConfigParam.${nested_element_index}.name"/>
                        <jelant:setProperty name="name" value="${context.getVariable(prop_name)}"/>
                        <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.ConfigParam.${nested_element_index}.value"/>
                        <jelant:setProperty name="value" value="${context.getVariable(prop_name)}"/>
                    </ConfigParam>
                    </j:if>
                </j:forEach>

                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.currentMethodTag"/>
                    <jelant:setProperty name="currentMethodTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.currentClassTag"/>
                    <jelant:setProperty name="currentClassTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.currentFieldTag"/>
                    <jelant:setProperty name="currentFieldTag" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.currentPackage"/>
                    <jelant:setProperty name="currentPackage" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.currentMethod"/>
                    <jelant:setProperty name="currentMethod" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.currentConstructor"/>
                    <jelant:setProperty name="currentConstructor" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.currentField"/>
                    <jelant:setProperty name="currentField" value="${context.getVariable(prop_name)}"/>
                    <j:set var="prop_name" value="maven.xdoclet.hibernatedoclet.jbossservice.${subelement_index}.currentClass"/>
                    <jelant:setProperty name="currentClass" value="${context.getVariable(prop_name)}"/>
                 >
                </jbossservice>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.packageSubstitution.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <packageSubstitution>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.packageSubstitution.${subelement_index}.packages"/>
                        <jelant:setProperty name="packages" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.packageSubstitution.${subelement_index}.substituteWith"/>
                        <jelant:setProperty name="substituteWith" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.packageSubstitution.${subelement_index}.useFirst"/>
                        <jelant:setProperty name="useFirst" value="${context.getVariable(subelement_index_var_name)}"/>
                </packageSubstitution>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <subTask>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.subTask.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </subTask>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <template>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.template.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </template>
              </j:if>
            </j:forEach>

            <j:set var="subelement_index" value="0"/>
            <j:forEach begin="0" end="20" indexVar="subelement_index">
              <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}"/>
              <j:if test="${context.getVariable(subelement_index_var_name) != null}">
                <xmlTemplate>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.useIds"/>
                        <jelant:setProperty name="useIds" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.xmlencoding"/>
                        <jelant:setProperty name="xmlencoding" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.schema"/>
                        <jelant:setProperty name="schema" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.validateXML"/>
                        <jelant:setProperty name="validateXML" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.acceptInterfaces"/>
                        <jelant:setProperty name="acceptInterfaces" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.acceptAbstractClasses"/>
                        <jelant:setProperty name="acceptAbstractClasses" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.packageSubstitutions"/>
                        <jelant:setProperty name="packageSubstitutions" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.packageSubstitutionInheritanceSupported"/>
                        <jelant:setProperty name="packageSubstitutionInheritanceSupported" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.subTaskClassName"/>
                        <jelant:setProperty name="subTaskClassName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.prefixWithPackageStructure"/>
                        <jelant:setProperty name="prefixWithPackageStructure" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.engine"/>
                        <jelant:setProperty name="engine" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.destinationFile"/>
                        <jelant:setProperty name="destinationFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.templateURL"/>
                        <jelant:setProperty name="templateURL" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.templateFile"/>
                        <jelant:setProperty name="templateFile" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.extent"/>
                        <jelant:setProperty name="extent" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.havingClassTag"/>
                        <jelant:setProperty name="havingClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.ofType"/>
                        <jelant:setProperty name="ofType" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.subTaskName"/>
                        <jelant:setProperty name="subTaskName" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.destDir"/>
                        <jelant:setProperty name="destDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.mergeDir"/>
                        <jelant:setProperty name="mergeDir" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.currentMethodTag"/>
                        <jelant:setProperty name="currentMethodTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.currentClassTag"/>
                        <jelant:setProperty name="currentClassTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.currentFieldTag"/>
                        <jelant:setProperty name="currentFieldTag" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.currentPackage"/>
                        <jelant:setProperty name="currentPackage" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.currentMethod"/>
                        <jelant:setProperty name="currentMethod" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.currentConstructor"/>
                        <jelant:setProperty name="currentConstructor" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.currentField"/>
                        <jelant:setProperty name="currentField" value="${context.getVariable(subelement_index_var_name)}"/>
                        <j:set var="subelement_index_var_name" value="maven.xdoclet.hibernatedoclet.xmlTemplate.${subelement_index}.currentClass"/>
                        <jelant:setProperty name="currentClass" value="${context.getVariable(subelement_index_var_name)}"/>
                </xmlTemplate>
              </j:if>
            </j:forEach>

        </hibernatedoclet>

        <!--
        In order to make it easier for the user of the XDoclet plugin, we automatically add the
        destination folder to the compile path. This way, people don't have to deal with maven:addPath in their own
        maven.xml scripts. This has been tested with Maven from CVS HEAD on 2002.12.15. (AH)
        -->
        <path id="hibernatedoclet.java.compile.src.set" location="${maven.xdoclet.hibernatedoclet.destDir}"/>
        <maven:addPath id="maven.compile.src.set" refid="hibernatedoclet.java.compile.src.set"/>

    </goal>

</project>
