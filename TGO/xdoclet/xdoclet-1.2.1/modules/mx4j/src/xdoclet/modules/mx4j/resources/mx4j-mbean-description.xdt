/* * <XDtI18n:getString bundle="xdoclet.modules.jmx.XDocletModulesJmxMessages" resource="do_not_edit"/> */package <XDtPackage:packageOf><XDtClass:fullClassName/></XDtPackage:packageOf>;import mx4j.MBeanDescriptionAdapter;import java.lang.reflect.Method;import java.lang.reflect.Constructor;/** * <XDtI18n:getString bundle="xdoclet.modules.jmx.XDocletModulesJmxMessages" resource="mbean_description"/><XDtClass:classCommentTags indent="0"/> */public class <XDtClass:classOf><XDtClass:fullClassName/>MBeanDescription</XDtClass:classOf> extends    <XDtClass:ifHasClassTag tagName="mx4j:description" paramName="extends"><XDtClass:classTagValue tagName="mx4j:description" paramName="extends"/></XDtClass:ifHasClassTag>    <XDtClass:ifDoesntHaveClassTag tagName="mx4j:description" paramName="extends">        <XDtClass:ifHasClassTag tagName="jmx:mbean" paramName="extends"><XDtClass:classTagValue tagName="jmx:mbean" paramName="extends"/>Description</XDtClass:ifHasClassTag>        <XDtClass:ifDoesntHaveClassTag tagName="jmx:mbean" paramName="extends"> MBeanDescriptionAdapter</XDtClass:ifDoesntHaveClassTag>    </XDtClass:ifDoesntHaveClassTag>{  <XDtClass:ifHasClassTag tagName="jmx:mbean" paramName="description">    public String getMBeanDescription() {        return "<XDtClass:classTagValue tagName="jmx:mbean" paramName="description"/>";    }  </XDtClass:ifHasClassTag>    public String getConstructorDescription(Constructor ctor) {        String name = ctor.getName();     <XDtConstructor:forAllConstructors superclasses="false" sort="false">      <XDtConstructor:ifHasConstructorTag tagName="jmx:managed-constructor" paramName="description">        if (ctor.toString().equals("<XDtJmx:constructorSignature/>")) {            return "<XDtConstructor:constructorTagValue tagName="jmx:managed-constructor" paramName="description"/>";        }      </XDtConstructor:ifHasConstructorTag>     </XDtConstructor:forAllConstructors>        return super.getConstructorDescription(ctor);    }    public String getConstructorParameterName(Constructor ctor, int index) {      <XDtConstructor:forAllConstructors superclasses="false" sort="false">       <XDtConstructor:ifHasConstructorTag tagName="jmx:managed-constructor" paramName="description">        if (ctor.toString().equals("<XDtJmx:constructorSignature/>")) {            switch (index) {              <XDtJmx:forAllIndexedConstructorParams>                case <XDtJmx:indexedConstructorParamValue tagName="jmx:managed-constructor-parameter" paramName="position"/>:                    return "<XDtJmx:indexedConstructorParamValue tagName="jmx:managed-constructor-parameter" paramName="name"/>";              </XDtJmx:forAllIndexedConstructorParams>            }        }       </XDtConstructor:ifHasConstructorTag>      </XDtConstructor:forAllConstructors>        return super.getConstructorParameterName(ctor, index);    }    public String getConstructorParameterDescription(Constructor ctor, int index) {      <XDtConstructor:forAllConstructors superclasses="false" sort="false">       <XDtConstructor:ifHasConstructorTag tagName="jmx:managed-constructor-parameter" paramName="description">        if (ctor.toString().equals("<XDtJmx:constructorSignature/>")) {            switch (index) {              <XDtJmx:forAllIndexedConstructorParams>                case <XDtJmx:indexedConstructorParamValue tagName="jmx:managed-constructor-parameter" paramName="position"/>:                    return "<XDtJmx:indexedConstructorParamValue tagName="jmx:managed-constructor-parameter" paramName="description"/>";              </XDtJmx:forAllIndexedConstructorParams>            }        }       </XDtConstructor:ifHasConstructorTag>      </XDtConstructor:forAllConstructors>        return super.getConstructorParameterDescription(ctor, index);    }    public String getAttributeDescription(String attribute) {     <XDtMethod:forAllMethods superclasses="false" sort="false">      <XDtMethod:ifHasMethodTag tagName="jmx:managed-attribute" paramName="description">       <XDtJmx:ifHasAttributeDescription>        if (attribute.equals("<XDtMethod:methodNameWithoutPrefix />")) {            return "<XDtMethod:methodTagValue tagName="jmx:managed-attribute" paramName="description"/>";        }       </XDtJmx:ifHasAttributeDescription>      </XDtMethod:ifHasMethodTag>     </XDtMethod:forAllMethods>        return super.getAttributeDescription(attribute);    }    public String getOperationDescription(Method operation) {        String name = operation.getName();      <XDtMethod:forAllMethods superclasses="false" sort="false">       <XDtMethod:ifHasMethodTag tagName="jmx:managed-operation" paramName="description">        if (name.equals("<XDtMethod:methodName/>")) {            return "<XDtMethod:methodTagValue tagName="jmx:managed-operation" paramName="description"/>";        }       </XDtMethod:ifHasMethodTag>      </XDtMethod:forAllMethods>        return super.getOperationDescription(operation);    }    public String getOperationParameterName(Method method, int index) {        String name = method.getName();      <XDtMethod:forAllMethods superclasses="false" sort="false">       <XDtMethod:ifHasMethodTag tagName="jmx:managed-operation-parameter" paramName="description">        if (name.equals("<XDtMethod:methodName/>")) {            switch (index) {              <XDtJmx:forAllIndexedMethodParams>                case <XDtJmx:indexedMethodParamValue tagName="jmx:managed-operation-parameter" paramName="position"/>:                    return "<XDtJmx:indexedMethodParamValue tagName="jmx:managed-operation-parameter" paramName="name"/>";              </XDtJmx:forAllIndexedMethodParams>            }        }       </XDtMethod:ifHasMethodTag>      </XDtMethod:forAllMethods>        return super.getOperationParameterName(method, index);    }    public String getOperationParameterDescription(Method method, int index) {        String name = method.getName();      <XDtMethod:forAllMethods superclasses="false" sort="false">       <XDtMethod:ifHasMethodTag tagName="jmx:managed-operation-parameter" paramName="description">        if (name.equals("<XDtMethod:methodName/>")) {            switch (index) {              <XDtJmx:forAllIndexedMethodParams>                case <XDtJmx:indexedMethodParamValue tagName="jmx:managed-operation-parameter" paramName="position"/>:                    return "<XDtJmx:indexedMethodParamValue tagName="jmx:managed-operation-parameter" paramName="description"/>";              </XDtJmx:forAllIndexedMethodParams>            }        }       </XDtMethod:ifHasMethodTag>      </XDtMethod:forAllMethods>        return super.getOperationParameterDescription(method, index);    }}