/*
 * <XDtI18n:getString bundle="xdoclet.modules.ejb.XDocletModulesEjbMessages" resource="do_not_edit"/>
 */

package <XDtPackage:packageOf><XDtHibernate:factoryClass/></XDtPackage:packageOf>;

import net.sf.hibernate.HibernateException;
import net.sf.hibernate.SessionFactory;
import net.sf.hibernate.cfg.Configuration;
import net.sf.hibernate.MappingException;

import javax.naming.NamingException;
import java.util.Properties;

/**
 * This class generates common interfaces for generating Hibernate SessionFactories.  In smaller environments
 * (such as development environments, smaller sites not using EJB, etc.), it makes sense to avoid the overhead
 * of and external SessionFactory service or MBean.  This is because the MBean needs to be restarted every time
 * your schema changes.  On the other hand, there are advantages to using these services in production environments.
 * This class bridges the gap between these competing benefits, and allows for rapid development by using
 * SessionFactories from static, local Configuration objects that are generated by XDoclet and instantiated inline.
 * Once the system is stabilized, the HibernateUtil subtask is set to use the JNDI SessionFactory and the
 * static code is ignored, without code changes elsewhere.
 */
public class <XDtClass:classOf><XDtHibernate:factoryClass/></XDtClass:classOf> {

    // default is set from <hibernateservice/> subtask
   <XDtHibernate:ifHasJndiName>
    public static String jndiFactoryName = "<XDtHibernate:jndiName/>";
   </XDtHibernate:ifHasJndiName>
   <XDtHibernate:ifNotHasJndiName>
    public static String jndiFactoryName = "java:/hibernate/SessionFactory";
   </XDtHibernate:ifNotHasJndiName>
    private static SessionFactory cachedSessionFactory = null;
    private static Properties propertyCache = new Properties();

    /** XDoclet generates a configuration automatically.  This selector uses it. */
    public static int LOCAL_SESSION_FACTORY = 0;
    /** In the case of JBoss (and maybe others), we might be using the HBN MBean.  This selector uses it.  */
    public static int JNDI_SESSION_FACTORY = 1;
    /** This code defaults to using the LOCAL_SESSION_FACTORY unless set differently at the subtask invocation */
   <XDtHibernate:ifUseJndiFactory>
    private static int sessionFactoryType = JNDI_SESSION_FACTORY;
   </XDtHibernate:ifUseJndiFactory>
   <XDtHibernate:ifNotUseJndiFactory>
    private static int sessionFactoryType = LOCAL_SESSION_FACTORY;
   </XDtHibernate:ifNotUseJndiFactory>

    /**
     * This returns {LOCAL_SESSION_FACTORY, JNDI_SESSION_FACTORY}
     * @return
     */
    public static int getSessionFactoryType() {
        return sessionFactoryType;
    }

    /**
     * Set the source of your factory.
     * @param sessionFactoryType
     */
    public static void setSessionFactoryType(int sessionFactoryType) {
        <XDtClass:classOf><XDtHibernate:factoryClass/></XDtClass:classOf>.sessionFactoryType = sessionFactoryType;
    }

    /**
     * This is the primary interface for this class.  This routine is all most applications ever call, but it is
     * called often!
     * @return
     * @throws HibernateException
     */
    public static SessionFactory getSessionFactory() throws HibernateException {
        return getSessionFactory(getPropertyCache(), false);
    }

    public static SessionFactory getSessionFactory(Properties props, boolean createTables) throws HibernateException {
        if (sessionFactoryType == LOCAL_SESSION_FACTORY) {
            return getLocalSessionFactory(props, createTables);
        } else if (sessionFactoryType == JNDI_SESSION_FACTORY)
            return getJNDISessionFactory();
        else {
            throw new HibernateException(new UnsupportedOperationException("factory type '" + sessionFactoryType + "' is not supported"));
        }
    }

    public static String getJndiFactoryName() {
        return jndiFactoryName;
    }

    public static void setJndiFactoryName(String jndiFactoryName) {
        <XDtClass:classOf><XDtHibernate:factoryClass/></XDtClass:classOf>.jndiFactoryName = jndiFactoryName;
    }

    public static SessionFactory getJNDISessionFactory() throws HibernateException {
        // Obtain initial context
        javax.naming.InitialContext initialContext = null;
        try {
            initialContext = new javax.naming.InitialContext();
            java.lang.Object objRef = initialContext.lookup(jndiFactoryName);
            return (SessionFactory) javax.rmi.PortableRemoteObject.narrow(objRef, SessionFactory.class);
        } catch (NamingException ne) {
            throw new HibernateException(ne);
        } finally {
            try {
                initialContext.close();
            } catch (Exception e) {
            }
        }
    }

    private static SessionFactory getLocalSessionFactory(Properties props, boolean createTables) throws HibernateException {
        if (cachedSessionFactory == null) {
            Configuration cfg = getConfiguration(props);
            if (createTables) {
                new net.sf.hibernate.tool.hbm2ddl.SchemaExport(cfg).create(true, true);
            }
            cachedSessionFactory = cfg.buildSessionFactory();
        }
        return cachedSessionFactory;
    }

    /**
     * Generated automatically by XDoclet, depending on what Hibernate classes it finds in the build path.
     * @param props
     * @param createTables
     * @return
     * @throws HibernateException
     */
    public static Configuration getConfiguration(Properties props) throws MappingException {
        Configuration cfg = new Configuration()
    <XDtHibernate:forAllPersistentClasses>
                    .addClass(<XDtClass:fullClassName/>.class)
    </XDtHibernate:forAllPersistentClasses>
                .setProperties(props);
        return cfg;
    }

    /**
     * Generated automatically by XDoclet, seeded by arguments to the HibernateUtil subtask.
     * @return
     */
    public static Properties getPropertyCache() {
    <XDtHibernate:ifGeneratePropertyCache>
        if (propertyCache == null || propertyCache.size() == 0) {
            propertyCache = new Properties();
            propertyCache.put("hibernate.dialect", "<XDtHibernate:dialect/>");
          <XDtHibernate:ifUseJndiFactory>
            propertyCache.put("hibernate.jndi.url", "<XDtHibernate:jndiName/>");
          </XDtHibernate:ifUseJndiFactory>
          <XDtHibernate:ifNotUseJndiFactory>
            propertyCache.put("hibernate.connection.driver_class", "<XDtHibernate:driver/>");
            propertyCache.put("hibernate.connection.url", "<XDtHibernate:jdbcUrl/>");
            propertyCache.put("hibernate.connection.username", "<XDtHibernate:userName/>");
            propertyCache.put("hibernate.connection.password", "<XDtHibernate:password/>");
          </XDtHibernate:ifNotUseJndiFactory>
        }
    </XDtHibernate:ifGeneratePropertyCache>
        return propertyCache;
    }

    public static void setPropertyCache(Properties propertyCache) {
        <XDtClass:classOf><XDtHibernate:factoryClass/></XDtClass:classOf>.propertyCache = propertyCache;
    }
}
