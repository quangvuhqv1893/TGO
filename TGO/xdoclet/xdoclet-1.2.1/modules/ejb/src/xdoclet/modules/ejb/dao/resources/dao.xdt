/*
 * <XDtI18n:getString bundle="xdoclet.modules.ejb.XDocletModulesEjbMessages" resource="do_not_edit"/>
 */
package <XDtPackage:packageOf><XDtEjbDao:daoClass/></XDtPackage:packageOf>;

/**
 * <XDtI18n:getString bundle="xdoclet.modules.ejb.XDocletModulesEjbMessages" resource="dao_for" arguments="<XDtEjb:ejbName/>"/>
<XDtClass:classCommentTags indent="0"/> */
public interface <XDtClass:classOf><XDtEjbDao:daoClass/></XDtClass:classOf>
{
    public void init();

<XDtEjbEntity:ifEntity>
    public void load(<XDtEjbPk:pkClass/> pk, <XDtClass:fullClassName/> ejb) throws javax.ejb.EJBException;
    public void store(<XDtClass:fullClassName/> ejb) throws javax.ejb.EJBException;
    public void remove(<XDtEjbPk:pkClass/> pk) throws javax.ejb.RemoveException, javax.ejb.EJBException;
<XDtComment:comment>
TODO: only add create method if the EJB actually has one or more ejbCreates.
//<Foo:ifHasCreateMethod/>
</XDtComment:comment>

<XDtClass:ifClassTagValueEquals tagName="ejb.dao" paramName="create-methods" superclasses="false" value="true" default="true">
    public <XDtEjbPk:pkClass/> create(<XDtClass:fullClassName/> ejb) throws javax.ejb.CreateException, javax.ejb.EJBException;
<XDtComment:comment>
//</Foo:ifHasCreateMethod/>
TODO: handle any other exceptions declared on these methods
</XDtComment:comment>
</XDtClass:ifClassTagValueEquals>
<XDtClass:ifClassTagValueEquals tagName="ejb.dao" paramName="finder-methods" superclasses="false" value="true" default="true">
<XDtMethod:forAllMethods superclasses="false" sort="false">
<XDtEjbHome:ifIsFinderMethod>
    public <XDtMethod:methodType/> <XDtEjbIntf:interfaceMethodName/>(<XDtParameter:parameterList/>) <XDtMethod:exceptionList/>;
</XDtEjbHome:ifIsFinderMethod>
</XDtMethod:forAllMethods>
</XDtClass:ifClassTagValueEquals>

</XDtEjbEntity:ifEntity>
<XDtMethod:forAllMethods superclasses="false" sort="false">
<XDtMethod:ifHasMethodTag tagName="dao.call">
 <XDtMethod:ifHasMethodTag tagName="dao.call" paramName="name">
    public <XDtMethod:methodType/> <XDtMethod:methodTagValue tagName="dao.call" paramName="name"/>(<XDtParameter:parameterList/>) <XDtMethod:exceptionList/>;
 </XDtMethod:ifHasMethodTag>
 <XDtMethod:ifDoesntHaveMethodTag tagName="dao.call" paramName="name">
    public <XDtMethod:methodType/> <XDtEjbIntf:interfaceMethodName/>(<XDtParameter:parameterList/>) <XDtMethod:exceptionList/>;
 </XDtMethod:ifDoesntHaveMethodTag>
</XDtMethod:ifHasMethodTag>
</XDtMethod:forAllMethods>

<XDtComment:comment>
TODO: handle @dao.method signature="..." class-level tags for including additional
methods in the DAO.
<XDtClass:forAllClassTags tagName="dao.method" tagKey="signature">
</XDtClass:forAllClassTags>

</XDtComment:comment>
   <XDtMerge:merge file="dao-custom.xdt">
   </XDtMerge:merge>
}
