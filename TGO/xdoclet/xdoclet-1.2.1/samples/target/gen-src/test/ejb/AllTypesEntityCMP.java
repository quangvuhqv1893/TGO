/*
 * Generated by XDoclet - Do not edit!
 */
package test.ejb;

/**
 * CMP layer for AllTypesEntity.
 * @xdoclet-generated at 28-04-04
 * @copyright The XDoclet Team
 * @author XDoclet
 * @version 1.2.1
 */
public abstract class AllTypesEntityCMP
   extends test.ejb.AllTypesEntityBean
   implements javax.ejb.EntityBean
{

   public test.interfaces.AllTypesEntityData getData()
   {
      test.interfaces.AllTypesEntityData dataHolder = null;
      try
      {
         dataHolder = new test.interfaces.AllTypesEntityData();

         dataHolder.setIVOwnerHdl( getIVOwnerHdl() );
         dataHolder.setId( getId() );
         dataHolder.setABoolean( getABoolean() );
         dataHolder.setAByte( getAByte() );
         dataHolder.setAShort( getAShort() );
         dataHolder.setAChar( getAChar() );
         dataHolder.setAnInt( getAnInt() );
         dataHolder.setALong( getALong() );
         dataHolder.setAFloat( getAFloat() );
         dataHolder.setADouble( getADouble() );
         dataHolder.setAnObject( getAnObject() );
         dataHolder.setAnObjectArray( getAnObjectArray() );
         dataHolder.setABooleanArray( getABooleanArray() );
         dataHolder.setAByteArray( getAByteArray() );
         dataHolder.setACharArray( getACharArray() );
         dataHolder.setAShortArray( getAShortArray() );
         dataHolder.setAnIntArray( getAnIntArray() );
         dataHolder.setALongArray( getALongArray() );
         dataHolder.setAFloatArray( getAFloatArray() );
         dataHolder.setADoubleArray( getADoubleArray() );
         dataHolder.setCreationDate( getCreationDate() );

      }
      catch (RuntimeException e)
      {
         throw new javax.ejb.EJBException(e);
      }

      return dataHolder;
   }

   public void ejbLoad() throws javax.ejb.EJBException
   {
      super.ejbLoad();
   }

   public void ejbStore() throws javax.ejb.EJBException
   {
         super.ejbStore();
   }

   public void ejbActivate() throws javax.ejb.EJBException
   {
      super.ejbActivate();
   }

   public void ejbPassivate() throws javax.ejb.EJBException
   {
      super.ejbPassivate();

   }

   public void setEntityContext(javax.ejb.EntityContext ctx) throws javax.ejb.EJBException
   {
      super.setEntityContext(ctx);
   }

   public void unsetEntityContext() throws javax.ejb.EJBException
   {
      super.unsetEntityContext();
   }

   public void ejbRemove() throws javax.ejb.EJBException, javax.ejb.RemoveException
   {
      super.ejbRemove();

   }

 /* Value Objects BEGIN */

/* Value Objects END */

   public abstract int[] getIVOwnerHdl() ;

   public abstract void setIVOwnerHdl( int[] IVOwnerHdl ) ;

   public abstract java.lang.String getId() ;

   public abstract void setId( java.lang.String id ) ;

   public abstract boolean getABoolean() ;

   public abstract void setABoolean( boolean ABoolean ) ;

   public abstract byte getAByte() ;

   public abstract void setAByte( byte AByte ) ;

   public abstract short getAShort() ;

   public abstract void setAShort( short AShort ) ;

   public abstract char getAChar() ;

   public abstract void setAChar( char AChar ) ;

   public abstract int getAnInt() ;

   public abstract void setAnInt( int anInt ) ;

   public abstract long getALong() ;

   public abstract void setALong( long ALong ) ;

   public abstract float getAFloat() ;

   public abstract void setAFloat( float AFloat ) ;

   public abstract double getADouble() ;

   public abstract void setADouble( double ADouble ) ;

   public abstract java.lang.Object getAnObject() ;

   public abstract void setAnObject( java.lang.Object anObject ) ;

   public abstract java.lang.Object[] getAnObjectArray() ;

   public abstract void setAnObjectArray( java.lang.Object[] anObjectArray ) ;

   public abstract boolean[] getABooleanArray() ;

   public abstract void setABooleanArray( boolean[] ABooleanArray ) ;

   public abstract byte[] getAByteArray() ;

   public abstract void setAByteArray( byte[] AByteArray ) ;

   public abstract char[] getACharArray() ;

   public abstract void setACharArray( char[] ACharArray ) ;

   public abstract short[] getAShortArray() ;

   public abstract void setAShortArray( short[] AShortArray ) ;

   public abstract int[] getAnIntArray() ;

   public abstract void setAnIntArray( int[] anIntArray ) ;

   public abstract long[] getALongArray() ;

   public abstract void setALongArray( long[] ALongArray ) ;

   public abstract float[] getAFloatArray() ;

   public abstract void setAFloatArray( float[] AFloatArray ) ;

   public abstract double[] getADoubleArray() ;

   public abstract void setADoubleArray( double[] ADoubleArray ) ;

   public abstract java.util.Date getCreationDate() ;

   public abstract void setCreationDate( java.util.Date creationDate ) ;

}
